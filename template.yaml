AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Bract - Subscription Management Platform

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    MemorySize: 128
    Environment:
      Variables:
        USER_POOL_ID: !Ref UserPool
        CLIENT_ID: !Ref UserPoolClient
        GOOGLE_CLIENT_ID: !Ref GoogleClientId
        GOOGLE_CLIENT_SECRET: !Ref GoogleClientSecret
        PLAID_CLIENT_ID: !Ref PlaidClientId
        PLAID_SECRET: !Ref PlaidSecret
        PLAID_ENV: !Ref PlaidEnv
        PLAID_ITEMS_TABLE: !Ref PlaidItemsTable
        PLAID_ACCOUNTS_TABLE: !Ref PlaidAccountsTable
        SUBSCRIPTION_REMINDERS_TABLE: !Ref SubscriptionRemindersTable
    Tags:
      Project: Bract
      Environment: Development

Parameters:
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID
    NoEcho: true
  GoogleClientSecret:
    Type: String
    Description: Google OAuth Client Secret
    NoEcho: true
  PlaidClientId:
    Type: String
    Description: Plaid Client ID
    NoEcho: true
  PlaidSecret:
    Type: String
    Description: Plaid Secret
    NoEcho: true
  PlaidEnv:
    Type: String
    Description: Plaid Environment (sandbox/development/production)
    Default: sandbox
    AllowedValues:
      - sandbox
      - development
      - production
  FromEmail:
    Type: String
    Description: Email address to send notifications from (must be verified in SES)
    Default: your-email@example.com

Resources:
  # API Gateway with Cognito Authorizer
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            AuthorizationScopes:
              - email
              - openid
              - profile
        AddDefaultAuthorizerToCorsPreflight: false
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'http://localhost:5173'"
        AllowCredentials: "'true'"
        MaxAge: "'600'"

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: bract-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: name
          Required: true
          Mutable: true
      Policies: {}

  # Google Identity Provider
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: email profile openid
      AttributeMapping:
        email: email
        name: name
        username: sub

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: bract-web-client
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:5173/
      LogoutURLs:
        - http://localhost:5173/
      SupportedIdentityProviders:
        - Google
      AllowedOAuthFlowsUserPoolClient: true
      ReadAttributes:
        - email
        - name
        - email_verified
      WriteAttributes:
        - email
        - name

  # DynamoDB Tables
  PlaidItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: plaid-items
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: item_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: item_id
          KeyType: RANGE

  PlaidAccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: plaid-accounts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: account_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: account_id
          KeyType: RANGE

  SubscriptionRemindersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: subscription-reminders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: stream_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: stream_id
          KeyType: RANGE

  # Plaid Lambda Functions
  CreateLinkTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/
      Handler: handlers.plaid_handler.create_link_token
      Runtime: python3.9
      Events:
        CreateLinkToken:
          Type: Api
          Properties:
            Path: /plaid/link-token
            Method: post
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        CreateLinkTokenOptions:
          Type: Api
          Properties:
            Path: /plaid/link-token
            Method: options
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE

  ExchangeTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/
      Handler: handlers.plaid_handler.exchange_token
      Runtime: python3.9
      Events:
        ExchangeToken:
          Type: Api
          Properties:
            Path: /plaid/exchange-token
            Method: post
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        ExchangeTokenOptions:
          Type: Api
          Properties:
            Path: /plaid/exchange-token
            Method: options
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref PlaidItemsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref PlaidAccountsTable

  GetAccountsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/
      Handler: handlers.plaid_handler.get_accounts
      Runtime: python3.9
      Events:
        GetAccounts:
          Type: Api
          Properties:
            Path: /plaid/accounts
            Method: get
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        GetAccountsOptions:
          Type: Api
          Properties:
            Path: /plaid/accounts
            Method: options
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref PlaidAccountsTable

  SubscriptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/
      Handler: handlers.plaid_handler.get_subscriptions
      Runtime: python3.9
      Events:
        GetSubscriptions:
          Type: Api
          Properties:
            Path: /subscriptions
            Method: get
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        GetSubscriptionsOptions:
          Type: Api
          Properties:
            Path: /subscriptions
            Method: options
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref PlaidItemsTable

  GetRemindersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/
      Handler: handlers.reminders_handler.get_reminders
      Runtime: python3.9
      Environment:
        Variables:
          SUBSCRIPTION_REMINDERS_TABLE: !Ref SubscriptionRemindersTable
      Events:
        GetReminders:
          Type: Api
          Properties:
            Path: /reminders
            Method: get
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionRemindersTable

  SetReminderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/
      Handler: handlers.reminders_handler.set_reminder
      Runtime: python3.9
      Environment:
        Variables:
          SUBSCRIPTION_REMINDERS_TABLE: !Ref SubscriptionRemindersTable
      Events:
        SetReminder:
          Type: Api
          Properties:
            Path: /reminders
            Method: post
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionRemindersTable

  # Scheduled Lambda Function for Subscription Sync
  ScheduledSubscriptionSyncFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/
      Handler: handlers.scheduled_handler.sync_subscriptions
      Runtime: python3.9
      Timeout: 300  # 5 minutes for processing all users
      MemorySize: 256  # More memory for processing
      Environment:
        Variables:
          PLAID_ITEMS_TABLE: !Ref PlaidItemsTable
          PLAID_ACCOUNTS_TABLE: !Ref PlaidAccountsTable
          SUBSCRIPTION_REMINDERS_TABLE: !Ref SubscriptionRemindersTable
          PLAID_CLIENT_ID: !Ref PlaidClientId
          PLAID_SECRET: !Ref PlaidSecret
          PLAID_ENV: !Ref PlaidEnv
      Events:
        DailySubscriptionSync:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)  # Run daily at midnight UTC
            Name: DailySubscriptionSync
            Description: Daily sync of subscriptions for all users
            Enabled: true
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PlaidItemsTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlaidAccountsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionRemindersTable

  # Email Notification Lambda Function
  EmailNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/
      Handler: handlers.notification_handler.send_reminders
      Runtime: python3.9
      Timeout: 300  # 5 minutes for processing all users
      MemorySize: 256
      Environment:
        Variables:
          SUBSCRIPTION_REMINDERS_TABLE: !Ref SubscriptionRemindersTable
          FROM_EMAIL: !Ref FromEmail
      Events:
        DailyReminderCheck:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)  # Run daily at 9 AM UTC
            Name: DailyReminderCheck
            Description: Daily check for subscription reminders
            Enabled: true
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SubscriptionRemindersTable
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: '*'

  # SES Configuration
  EmailIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref FromEmail

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  UserPoolArn:
    Description: Cognito User Pool ARN
    Value: !GetAtt UserPool.Arn
  ApiId:
    Description: API Gateway ID
    Value: !Ref ApiGatewayApi 
