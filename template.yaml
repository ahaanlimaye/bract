AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Bract - Subscription Management Platform

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    MemorySize: 128
    Environment:
      Variables:
        USER_POOL_ID: !Ref UserPool
        CLIENT_ID: !Ref UserPoolClient
        GOOGLE_CLIENT_ID: !Ref GoogleClientId
        GOOGLE_CLIENT_SECRET: !Ref GoogleClientSecret
    Tags:
      Project: Bract
      Environment: Development

Parameters:
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID
    NoEcho: true
  GoogleClientSecret:
    Type: String
    Description: Google OAuth Client Secret
    NoEcho: true

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: bract-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: name
          Required: true
          Mutable: true
      Policies: {}

  # Google Identity Provider
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: email profile openid
      AttributeMapping:
        email: email
        name: name
        username: sub

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: bract-web-client
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:5173/
      LogoutURLs:
        - http://localhost:5173/
      SupportedIdentityProviders:
        - Google
      AllowedOAuthFlowsUserPoolClient: true
      ReadAttributes:
        - email
        - name
        - email_verified
      WriteAttributes:
        - email
        - name

  # API Gateway with Cognito Authorizer
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'http://localhost:5173'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: Bract API
        paths:
          /health:
            get:
              responses:
                '200':
                  description: Health check response
                  schema:
                    type: object
                    properties:
                      status:
                        type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: '{"status": "ok"}'

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  UserPoolArn:
    Description: Cognito User Pool ARN
    Value: !GetAtt UserPool.Arn
  ApiId:
    Description: API Gateway ID
    Value: !Ref ApiGatewayApi 
